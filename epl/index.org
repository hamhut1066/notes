* Elements of Programming Languages

* Concrete vs. Abstract Syntax
** Concrete
CFG examples

#+BEGIN_SRC haskell
E -> E PLUS F | F
F -> F TIMES F | NUM | LPAREN E RPAREN
#+END_SRC

needs to handle precendence, parens etc...
- specified using Context-Free grammars
- used for compiler/interpreter
** Abstract Syntax
BNF format

#+BEGIN_SRC haskell
Expr |E e ::= e1 + e2 | e1 x e2 | n e N
- Backus Naur Form (BNF)
- used to describe the ~abstract syntax~
#+END_SRC

* Induction
** Mathematical Induction
if we have a property P over Natural no's
if P(0) is true
assume P(n) is true
prove for n + 1

This can also be used for Abstract Syntax Trees
** Structural
** Rule

* Evaluation
[[file:eval.org][Link to eval notes]]
* Booleans and Conditionals
This is extending the simple arithmetic language we defined before, (with ~==~ and =if e then e1 else e2=)
This ist he first language making non-trivial choices!
* Static vs. Dynamic typing
These are rarely-realised extremes. most ~statically~ typed languages handle some errors dynamically

In contrast, any ~dynamically~ typed language can be thought of as a statically typed one with just _one_ type.
** Static Typing
- not all expressions are well-formed; some sensible programs are not allowed.
- types can be used to catch errors, improve performance
** Dynamic Typing
- all expressions are well-formed; any program can be run
- type errors arise dynamically; higher overhead for tagging and checking
